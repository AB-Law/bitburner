const settings = {
  keys: {
    buyEquipment: 'BB_BUY_EQUIPMENT',
    doAscension: 'BB_DO_ASCENSION',
    strAscMultHardLimit: 'BB_STR_ASC_MULT_HARD_LIMIT',
  },
}

function getItem(key) {
  let item = localStorage.getItem(key)

  return item ? JSON.parse(item) : undefined
}

function setItem(key, value) {
  localStorage.setItem(key, JSON.stringify(value))
}

const gangMemberNamesList = [
  'Darth Vader',
  'Joker',
  'Two-Face',
  'Warden Norton',
  'Hannibal Lecter',
  'Sauron',
  'Bane',
  'Tyler Durden',
  'Agent Smith',
  'Gollum',
  'Vincent Vega',
  'Saruman',
  'Loki',
  'Vito Corleone',
  'Balrog',
  'Palpatine',
  'Michael Corleone',
  'Talia al Ghul',
  'John Doe',
  'Scarecrow',
  'Commodus',
  'Jabba the Hutt',
  'Scar',
  'Grand Moff Tarkin',
  'Boba Fett',
  'Thanos',
  'Terminator',
  'Frank Costello',
  'Hector Barbossa',
  'Xenomorph',
]

const equipmentTypes = ['Weapon', 'Armor', 'Vehicle', 'Rootkit', 'Augmentation']

function localeHHMMSS(ms = 0) {
  if (!ms) {
    ms = new Date().getTime()
  }

  return new Date(ms).toLocaleTimeString()
}

function getMyGangInformation(ns) {
  return ns.gang.getGangInformation()
}

function getMemberNames(ns) {
  return ns.gang.getMemberNames()
}

function getMemberInformation(ns, name) {
  return ns.gang.getMemberInformation(name)
}

function getEquipmentsToBuy(ns) {
  const desirableAugs = [
    'Bionic Arms',
    'Bionic Legs',
    'Bionic Spine',
    'BrachiBlades',
    'Nanofiber Weave',
    'Synthetic Heart',
    'Synfibril Muscle',
    'Graphene Bone Lacings',
  ]

  return ns.gang
    .getEquipmentNames()
    .filter((equipmentName) => {
      return ns.gang.getEquipmentType(equipmentName) != 'Augmentation' || desirableAugs.includes(equipmentName)
    })
    .map((equipmentName) => {
      const type = ns.gang.getEquipmentType(equipmentName)

      return {
        name: equipmentName,
        type,
      }
    })
    .sort(
      (a, b) => equipmentTypes.findIndex((equipmentType) => equipmentType === a.type) - equipmentTypes.findIndex((equipmentType) => equipmentType === b.type)
    )
}

function getMemberAbilities(ns, name) {
  const gangMemberInfo = getMemberInformation(ns, name)
  const terrorismAbilities = gangMemberInfo.hacking + gangMemberInfo.strength + gangMemberInfo.defense + gangMemberInfo.dexterity + gangMemberInfo.charisma
  const vigilantieAbilities = gangMemberInfo.hacking + gangMemberInfo.strength + gangMemberInfo.defense + gangMemberInfo.dexterity + gangMemberInfo.charisma

  return { terrorismAbilities, vigilantieAbilities }
}

export async function main(ns) {
  ns.disableLog('ALL')
  ns.tprint(`[${localeHHMMSS()}] Starting gangManager.ns`)

  let hostname = ns.getHostname()

  if (hostname !== 'home') {
    throw new Exception('Run the script from home')
  }

  let nextAscensionAttempt = new Date().getTime() + 60 * 1000

  while (true) {
    const doAscension = getItem(settings.keys.doAscension) || false
    const buyEquipment = getItem(settings.keys.buyEquipment) || false
    const strengthAscensionMultHardLimit = getItem(settings.keys.strAscMultHardLimit) || 10
    setItem(settings.keys.doAscension, doAscension)
    setItem(settings.keys.buyEquipment, buyEquipment)
    setItem(settings.keys.strAscMultHardLimit, strengthAscensionMultHardLimit)

    const equipmentsToBuy = getEquipmentsToBuy(ns)
    const gangMembersToAscend = []

    while (ns.gang.canRecruitMember()) {
      const gangMemberNames = getMemberNames(ns)
      ns.gang.recruitMember(gangMemberNamesList[gangMemberNames.length])
      ns.tprint(`[${localeHHMMSS()}] Recruited ${gangMemberNamesList[gangMemberNames.length]}`)
      await ns.sleep(1)
    }

    const gangMemberNames = getMemberNames(ns)

    let strengthAscensionMultExpectation = 0
    gangMemberNames.forEach((gangMemberName) => {
      const gangMemberInfo = getMemberInformation(ns, gangMemberName)

      strengthAscensionMultExpectation = Math.min(strengthAscensionMultExpectation, gangMemberInfo.strengthAscensionMult)
    })

    strengthAscensionMultExpectation = Math.max(0, strengthAscensionMultExpectation) + 2
    strengthAscensionMultExpectation = Math.min(strengthAscensionMultExpectation, strengthAscensionMultHardLimit)

    gangMemberNames.forEach((gangMemberName) => {
      const gangMemberInfo = getMemberInformation(ns, gangMemberName)
      let hasAllEquipment = true

      if (buyEquipment) {
        equipmentsToBuy.forEach((equipment) => {
          if (gangMemberInfo.equipment.includes(equipment.name)) return
          if (gangMemberInfo.augmentations.includes(equipment.name)) return

          const boughtEquipment = ns.gang.purchaseEquipment(gangMemberName, equipment.name)

          if (equipment.type !== 'Augmentation') {
            hasAllEquipment = false
          }

          if (boughtEquipment) {
            ns.print(`[${localeHHMMSS()}] Bought ${equipment.name} (${equipment.type}) for ${gangMemberName}`)
          }
        })

        if (hasAllEquipment && gangMemberInfo.strengthAscensionMult < strengthAscensionMultExpectation) {
          gangMembersToAscend.push(gangMemberName)
        }
      }
    })

    if (new Date().getTime() > nextAscensionAttempt) {
      if (doAscension && gangMemberNames.length === 30) {
        gangMembersToAscend
          .sort((a, b) => {
            const strengthAscensionMultA = getMemberInformation(ns, a).strengthAscensionMult
            const strengthAscensionMultB = getMemberInformation(ns, b).strengthAscensionMult

            return strengthAscensionMultB - strengthAscensionMultA
          })
          .slice(0, Math.ceil(gangMembersToAscend.length / 3))
          .forEach((gangMemberName) => {
            ns.gang.ascendMember(gangMemberName)
            ns.tprint(`[${localeHHMMSS()}] Ascended ${gangMemberName}`)
          })
      }

      nextAscensionAttempt = new Date().getTime() + 60 * 1000
    }

    const myGang = getMyGangInformation(ns)
    const wantToReduceWanted =
      myGang.wantedLevel > 1 &&
      ((myGang.respectGainRate < myGang.wantedLevelGainRate * 10 && myGang.wantedLevelGainRate) || myGang.wantedLevel > myGang.respect)

    let gangMembersTaskTargets = {
      wanted: 0,
      terrorism: 0,
      traffick: 0,
    }

    const terrorismDividerRate = myGang.wantedLevel > myGang.respect || myGang.respect < 2500000 ? 2 : 4

    gangMembersTaskTargets.wanted = wantToReduceWanted ? Math.ceil(gangMemberNames.length / 3) : 0
    gangMembersTaskTargets.terrorism = Math.max(0, Math.ceil((gangMemberNames.length - gangMembersTaskTargets.wanted) / terrorismDividerRate))
    gangMembersTaskTargets.traffick = Math.max(0, gangMemberNames.length - gangMembersTaskTargets.wanted - gangMembersTaskTargets.terrorism)

    gangMemberNames.sort((a, b) => {
      const memberAbilitiesA = getMemberAbilities(ns, a)
      const memberAbilitiesB = getMemberAbilities(ns, b)

      if (gangMembersTaskTargets.wanted > 0) {
        if (memberAbilitiesA.vigilantieAbilities !== memberAbilitiesB.vigilantieAbilities) {
          return memberAbilitiesB.vigilantieAbilities - memberAbilitiesA.vigilantieAbilities
        }

        return memberAbilitiesB.terrorismAbilities - memberAbilitiesA.terrorismAbilities
      }

      return memberAbilitiesA.terrorismAbilities - memberAbilitiesB.terrorismAbilities
    })

    gangMemberNames.forEach((gangMemberName) => {
      const terrorismAbilities = getMemberAbilities(ns, gangMemberName).terrorismAbilities
      const isTerrorismRisky = terrorismAbilities > 620 && terrorismAbilities < 710

      if (gangMembersTaskTargets.wanted > 0) {
        ns.gang.setMemberTask(gangMemberName, 'Vigilante Justice')
        gangMembersTaskTargets.wanted -= 1
      } else if (!isTerrorismRisky && gangMembersTaskTargets.terrorism > 0) {
        ns.gang.setMemberTask(gangMemberName, 'Terrorism')
        gangMembersTaskTargets.terrorism -= 1
      } else if (terrorismAbilities >= 620 && gangMembersTaskTargets.traffick > 0) {
        ns.gang.setMemberTask(gangMemberName, 'Traffick Illegal Arms')
        gangMembersTaskTargets.traffick -= 1
      } else {
        if (!isTerrorismRisky) {
          ns.gang.setMemberTask(gangMemberName, 'Terrorism')
          gangMembersTaskTargets.terrorism -= 1
        } else {
          ns.gang.setMemberTask(gangMemberName, 'Vigilante Justice')
          gangMembersTaskTargets.wanted -= 1
        }
      }
    })

    await ns.sleep(2500)
  }
}
